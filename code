import streamlit as st
import speech_recognition as sr
import pandas as pd
import altair as alt
from transformers import BertTokenizer, BertForSequenceClassification
from textblob import TextBlob
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from googletrans import Translator

st.set_page_config(page_title="Linguistic Emotion Decoder", page_icon=":guardsman:", layout="wide")

hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

def convert_to_df(sentiment):
    sentiment_dict = {'polarity': sentiment.polarity, 'subjectivity': sentiment.subjectivity}
    sentiment_df = pd.DataFrame(sentiment_dict.items(), columns=['metric', 'value'])
    return sentiment_df

def analyze_token_sentiment(docx):
    analyzer = SentimentIntensityAnalyzer()
    pos_list = []
    neg_list = []
    neu_list = []
    for i in docx.split():
        res = analyzer.polarity_scores(i)['compound']
        if res > 0.1:
            pos_list.append(i)
            pos_list.append(res)
        elif res <= -0.1:
            neg_list.append(i)
            neg_list.append(res)
        else:
            neu_list.append(i)
    result = {'positives': pos_list, 'negatives': neg_list, 'neutral': neu_list}
    return result

def main():
    st.title("Linguistic Emotion Decoder")
    st.subheader("Enter Text or Speak to Analyze Sentiment")
    st.write("This app uses TextBlob, VADER, and BERT to analyze the sentiment of text input.")

    input_method = st.radio("Select Input Method", ("Type Text", "Speech to Text"))
    raw_text = ""
    if input_method=="Type Text":
        # Perform sentiment analysis
        raw_text = st.text_area("", height=200)
        if st.button("Analyze"):
            st.write("Results")
            sentiment = TextBlob(raw_text).sentiment
            st.write(sentiment)

            if sentiment.polarity > 0:
                st.markdown("Sentiment: Positive 😊")
            elif sentiment.polarity < 0:
              st.markdown("Sentiment: Negative 😠")
            else:
                st.markdown("Sentiment: Neutral 😐")

            result_df = convert_to_df(sentiment)
            st.dataframe(result_df)

            c = alt.Chart(result_df).mark_bar().encode(
                x='metric',
                y='value',
                color='metric'
            ).properties(width=500, height=250)

            st.altair_chart(c, use_container_width=True)

            st.write("Token Sentiment")
            token_sentiments = analyze_token_sentiment(raw_text)
            st.write(token_sentiments)

    elif input_method == "Speech to Text":
        st.write("Speak into the microphone...")
        recognizer = sr.Recognizer()
        language = st.selectbox("Select Language", ["en-US", "te-IN", "hi-IN", "fr-FR", "es-ES", "de-DE", "it-IT", "ja-JP", "ko-KR", "zh-CN"])

        start_listening_button = st.button("Start Recording")
        if start_listening_button:
            #st.write("Listening...")
            with sr.Microphone() as source:
                audio = recognizer.listen(source)

            try:
                raw_text = recognizer.recognize_google(audio, language=language)
                st.write("Converted Text: ", raw_text)
                translated_text = translate_text(raw_text, "en")
                st.write("Translated Text: ", translated_text)
                raw_text = translated_text
                stop_listening_button = st.button("Restart recording")
                if stop_listening_button:
                    return


                # Perform sentiment analysis
                if raw_text:
                    st.write("Results")
                    sentiment = TextBlob(raw_text).sentiment
                    st.write(sentiment)

                    if sentiment.polarity > 0:
                        st.markdown("Sentiment: Positive 😊")
                    elif sentiment.polarity < 0:
                        st.markdown("Sentiment: Negative 😠")
                    else:
                        st.markdown("Sentiment: Neutral 😐")

                    result_df = convert_to_df(sentiment)
                    st.dataframe(result_df)

                    c = alt.Chart(result_df).mark_bar().encode(
                        x='metric',
                        y='value',
                        color='metric'
                    ).properties(width=500, height=250)

                    st.altair_chart(c, use_container_width=True)

                    st.write("Token Sentiment")
                    token_sentiments = analyze_token_sentiment(raw_text)
                    st.write(token_sentiments)
            except Exception as e:
                st.write("Speech recognition could not understand audio:", e)
def translate_text(text, dest_language):
    translator = Translator()
    translated = translator.translate(text, dest=dest_language)
    return translated.text

if __name__ == '__main__':
    main()
